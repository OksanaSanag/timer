{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timerActive","setTimerActive","cl","prevCl","click","setClick","useEffect","timer$","Subject","interval","pipe","takeUntil","subscribe","prevTime","next","complete","className","Math","trunc","slice","onClick","event","prev","timeStamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAoFeA,MA7Ef,WACE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA0BJ,mBAAS,CACjCK,GAAI,EACJC,OAAQ,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KA+CA,OA1CAC,qBAAU,WACR,IAAMC,EAAS,IAAIC,IAWnB,OAVAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WAGLZ,GACFD,GAAQ,SAAAc,GAAQ,OAAIA,EAAW,QAI9B,WACLN,EAAOO,OACPP,EAAOQ,cAER,CAACf,IAEJM,qBAAU,WACJF,EAAMF,GAAGE,EAAMD,OAAS,KAC1BF,GAAe,KAEhB,CAACG,IAqBF,qBAAKY,UAAU,OAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,QAAf,UAIE,sCAAS,IAAMC,KAAKC,MAAMpB,EAAK,OAAOqB,OAAO,GAA7C,QACA,sCAAS,IAAMF,KAAKC,MAAOpB,EAAK,KAAM,KAAKqB,OAAO,GAAlD,QACA,sCAAS,IAAMrB,EAAK,KAAM,IAAIqB,OAAO,GAArC,UAEF,sBAAKH,UAAU,WAAf,UACE,wBACEI,QAAY,WAAOrB,EAAQ,GAAIE,GAAgBD,IADjD,SAEKA,EAAc,OAAS,UAE5B,wBACEoB,QAAY,SAACC,GAAYhB,GAAS,SAACiB,GAAD,mBAAC,eAAclB,GAAf,IAAsBF,GAAImB,EAAME,UAAWpB,OAAQmB,EAAKpB,SAD5F,oBAIA,wBAAQkB,QAAY,WAAOrB,EAAQ,GAAIE,GAAe,IAAtD,8BCjEKuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab83c123.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { interval, Subject  } from 'rxjs';\nimport { takeUntil } from \"rxjs/operators\";\nimport './App.css';\n\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [timerActive, setTimerActive] = useState(false);\n  const [click, setClick] = useState({\n    cl: 0,\n    prevCl: 0,\n  });\n\n  useEffect(() => {\n    const timer$ = new Subject();\n    interval(1000)\n      .pipe(takeUntil(timer$))\n      .subscribe(() => {\n        //* First method \n        // if (timerActive) {setTime(prevTime => prevTime + 1000);}\n        if (timerActive) {\n          setTime(prevTime => prevTime + 1);\n        }\n      });\n\n    return () => {\n      timer$.next();\n      timer$.complete();\n    };\n  }, [timerActive]);\n\n  useEffect(() => {\n    if (click.cl-click.prevCl < 300) {\n      setTimerActive(false);\n    }\n  }, [click]);\n\n\n//* Timer without RxJS\n\n  //useEffect(() => {\n    //let interval = null;\n    // if (timerActive) {\n    //   interval = setInterval(() => {\n    //     setTime(prevTime => prevTime + 1)\n    //   }, 1000)\n    // } else {\n    //   clearInterval(interval)\n    // }\n\n    // return () => clearInterval(interval);\n\n  //}, [ timerActive ]);\n\n\n  return (\n    <div className='main'>\n      <div className='timersBlock'>\n        <div className='clock'>\n          {/* First method */}\n          {/* <div>{new Date(time).toISOString().slice(11, 19)}</div> */}\n          \n          <span> {('0' + Math.trunc(time/3600)).slice(-2)}: </span>\n          <span> {('0' + Math.trunc((time%3600)/60)).slice(-2)}: </span>\n          <span> {('0'+ (time%3600)%60).slice(-2)} </span>\n        </div>\n        <div className='btnBlock'>\n          <button \n            onClick = { () => {setTime(0); setTimerActive(!timerActive)} }>\n              {timerActive ? 'Stop' : 'Start'}\n          </button>\n          <button \n            onClick = { (event) => { setClick((prev) => ({...click, cl: event.timeStamp, prevCl: prev.cl}));} }>\n              Wait 2\n          </button>\n          <button onClick = { () => {setTime(0); setTimerActive(true)} }> Reset </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}